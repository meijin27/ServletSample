package tool;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class PasswordUtil {
    private static final String ALGORITHM = "SHA-256";
    private static final String CIPHER_ALGORITHM = "AES";
    private static final int STRETCH_COUNT = 10001;
    private static final int SALT_BYTE_SIZE = 32;
    private static final int MASTER_KEY_SIZE = 16;  // AESのキーサイズ（128bit）
    private static final String PEPPER = System.getenv("PEPPER");
    static {
        // 環境変数からPEPPERを取得。設定されていなければデフォルト値を設定
        if (PEPPER == null) {
            PEPPER = "default_pepper";  
        }
    }

    // 暗号化キーを生成します。SecureRandomを用いてランダムなバイト列を生成し、
    // それをBase64でエンコードした文字列として返します。
    private static String generateEncryptionKey() {
        SecureRandom random = new SecureRandom();
        byte[] key = new byte[SALT_BYTE_SIZE];
        random.nextBytes(key);
        return Base64.getEncoder().encodeToString(key);
    }

    // 暗号化キーをAESで暗号化します。ユーザーIDとパスワードを結合した文字列を鍵として使用します。
    private static String encryptWithAES(String key, String value) {
        try {
            SecretKeySpec keySpec = new SecretKeySpec(getSHA256(key).getBytes(), "AES");
            IvParameterSpec ivSpec = new IvParameterSpec(new byte[16]); // 0初期化された16バイトのIV
            Cipher cipher = Cipher.getInstance(AES);
            cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);
            byte[] encrypted = cipher.doFinal(value.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    // 新規ユーザー登録時に呼び出す。パスワードと秘密の答えを暗号化します。
    public static User register(String userId, String password, String secretQuestion, String secretAnswer) {
        // パスワードのハッシュ化
        String salt = getNewSalt();
        String hashedPassword = getSaltedHash(password, salt);

        // 暗号化キーの生成と暗号化。ユーザーIDとパスワードを結合した文字列を鍵として使用します。
        String encryptionKey = generateEncryptionKey();
        String encryptedKey = encryptWithAES(userId + password, encryptionKey);

        // 秘密の答えの暗号化。暗号化キーを鍵として使用します。
        String encryptedSecretAnswer = encryptWithAES(encryptionKey, secretAnswer);

        // ユーザー情報の作成
        User user = new User(userId, hashedPassword, salt, secretQuestion, encryptedSecretAnswer, encryptedKey);
        // データベースにユーザー情報を保存する処理を行います。詳細は省略します。
        
        return user;
    }

    public static String getSaltedHash(String password, String salt) {
        String saltPepperPass = salt + password + PEPPER;
        return getHashStretched(saltPepperPass, STRETCH_COUNT);
    }

    public static String getNewSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_BYTE_SIZE];
        random.nextBytes(salt);
        return Base64.getEncoder().encodeToString(salt);
    }

    private static String getHashStretched(String input, int count) {
        String hashed = input;
        for (int i = 0; i < count; i++) {
            hashed = getSHA256(hashed);
        }
        return hashed;
    }

    private static String getSHA256(String input) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        if (md != null) {
            md.update(input.getBytes());
            return byteToHex(md.digest());
        }
        return null;
    }

    private static String byteToHex(byte[] byteData) {
        StringBuilder sb = new StringBuilder();
        for (byte datum : byteData) {
            sb.append(Integer.toString((datum & 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }
}



/*このコードの使い方は以下の通りです。

初回アカウント作成時に、新たなソルトを生成し、パスワードと合わせてソルト・ハッシュを行います。そして、生成したソルトとハッシュ値をデータベースなどに保存します。

String password = "user_password";
String salt = PasswordUtil.getNewSalt();
String hashedPassword = PasswordUtil.getSaltedHash(password, salt);
// save salt and hashedPassword in database
次に、認証時には、保存されているソルトとユーザーが入力したパスワードを用いてハッシュを計算し、保存されているハッシュと比較します。

String inputPassword = "user_input_password";
// get salt from database
String hashedInputPassword = PasswordUtil.getSaltedHash(inputPassword, salt);
// compare hashedInputPassword and stored hashedPassword
以上が一例です。適宜、ご自身の環境や要件に合わせてコードを調整してください。また、より高度なセキュリティを確保するためには、専用のライブラリ（例：Bcrypt、Scrypt、Argon2など）の利用を検討すると良いでしょう。 */